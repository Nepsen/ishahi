(function() {
  const REFRESH_INTERVAL = 60000; // 60 рж╕рзЗржХрзЗржирзНржбрзЗ ржПржХржмрж╛рж░ ржЖржкржбрзЗржЯ ржХрж░рзЗ
  const SW_PATH = '/sw.js'; // Service Worker ржлрж╛ржЗрж▓ (GitHub Pages-ржП ржПржХржЗ ржлрзЛрж▓рзНржбрж╛рж░рзЗ рж░рж╛ржЦрзБржи)

  // ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯрзЗрж░ рж╕ржХрж▓ ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ рж░рж┐рж╕рзЛрж░рзНрж╕ рж╕ржВржЧрзНрж░рж╣ ржХрж░рзЗ
  function collectResources() {
    const urls = new Set([location.href.split(/[?#]/)[0]]);
    document.querySelectorAll(`
      link[href], script[src], img[src], source[src],
      video[src], audio[src], iframe[src], embed[src],
      object[data], link[rel*="icon"][href], link[rel="manifest"][href]
    `).forEach((el) => {
      const url = el.href || el.src || el.data;
      if (url) {
        try {
          urls.add(new URL(url, location.href).href.split(/[?#]/)[0]);
        } catch (e) {}
      }
    });
    return Array.from(urls);
  }

  // Service Worker рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░ ржХрж░рзЗ
  function registerServiceWorker(resources) {
    if (!('serviceWorker' in navigator)) {
      console.warn('[AutoOffline] тЭМ Service Worker рж╕рж╛ржкрзЛрж░рзНржЯ ржХрж░рзЗ ржирж╛!');
      return;
    }

    navigator.serviceWorker.register(SW_PATH, { scope: '/' })
      .then((reg) => {
        console.log('[AutoOffline] тЬЕ Service Worker рж░рзЗржЬрж┐рж╕рзНржЯрж╛рж░рзНржб!', reg.scope);
        if (reg.active) {
          reg.active.postMessage({ type: 'CACHE_RESOURCES', resources });
          console.log('[AutoOffline] ЁЯУж рж░рж┐рж╕рзЛрж░рзНрж╕ рж▓рж┐рж╕рзНржЯ ржкрж╛ржарж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ:', resources);
        } else {
          console.log('[AutoOffline] тП│ Service Worker ржПржЦржирзЛ ржПржХрзНржЯрж┐ржн рж╣ржпрж╝ржирж┐, рзи рж╕рзЗржХрзЗржирзНржб ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛...');
          setTimeout(() => {
            reg.active?.postMessage({ type: 'CACHE_RESOURCES', resources });
          }, 2000);
        }
      })
      .catch((err) => {
        console.error('[AutoOffline] тЭМ рж░рзЗржЬрж┐рж╕рзНржЯрзНрж░рзЗрж╢ржи ржлрзЗржЗрж▓рзНржб:', err);
      });
  }

  // ржорзЗржЗржи ржЗржирж┐рж╢рж┐ржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи ржлрж╛ржВрж╢ржи
  function init() {
    const resources = collectResources();
    console.log('[AutoOffline] ЁЯМР ржХрзНржпрж╛рж╢рзЗ ржХрж░рж╛рж░ рж░рж┐рж╕рзЛрж░рзНрж╕:', resources);
    registerServiceWorker(resources);

    // ржирж┐ржпрж╝ржорж┐ржд ржЖржкржбрзЗржЯ ржХрж░рж╛рж░ ржЬржирзНржп ржЗржирзНржЯрж╛рж░ржнрж╛рж▓ рж╕рзЗржЯ ржХрж░рж╛
    setInterval(() => {
      if (navigator.onLine) {
        const updatedResources = collectResources();
        console.log('[AutoOffline] ЁЯФД рж░рж┐рж╕рзЛрж░рзНрж╕ рж▓рж┐рж╕рзНржЯ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...', updatedResources);
        registerServiceWorker(updatedResources);
      } else {
        console.log('[AutoOffline] ЁЯУ┤ ржЕржлрж▓рж╛ржЗржи тАФ ржЖржкржбрзЗржЯ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ ржирж╛ред');
      }
    }, REFRESH_INTERVAL);
  }

  // DOM рж▓рзЛржб рж╣рж▓рзЗ рж╕рзНржХрзНрж░рж┐ржкрзНржЯ ржЪрж╛рж▓рзБ ржХрж░рж╛
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
